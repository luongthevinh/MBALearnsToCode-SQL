-- https://sqlschool.modeanalytics.com/advanced/window-functions/* Write a query modification of the above example query that shows the duration of each rideas a percentage of the total time accrued by riders from each start_terminalhttps://modeanalytics.com/tutorial/reports/74d998523ca4 */SELECT    start_terminal,    duration_seconds,    SUM(duration_seconds)        OVER          (PARTITION BY start_terminal)      AS start_terminal_total,    100 * duration_seconds /      SUM(duration_seconds)        OVER          (PARTITION BY start_terminal)      AS duration_percent_of_start_terminal_total  FROM    tutorial.dc_bikeshare_q1_2012  WHERE    start_time < '2012-01-08'  ORDER BY    start_terminal,    duration_percent_of_start_terminal_total DESC;/* Write a query that shows a running total of the duration of bike rides (similar to the last example),but grouped by end_terminal, and with ride duration sorted in descending order.https://modeanalytics.com/tutorial/reports/7dd0f3bad4cc */SELECT    start_terminal,    duration_seconds,    SUM(duration_seconds)        OVER          (PARTITION BY end_terminal ORDER BY duration_seconds DESC)      AS cumu_duration  FROM    tutorial.dc_bikeshare_q1_2012  WHERE    start_time < '2012-01-08';/* Write a query that shows the 5 longest rides from each starting terminal,ordered by terminal, and longest to shortest rides within each terminal.Limit to rides that occurred before Jan. 8, 2012.https://modeanalytics.com/tutorial/reports/bda54a3afc03 */SELECT    subq.*  FROM (     SELECT         start_terminal,         duration_seconds,         RANK()           OVER             (PARTITION BY start_terminal              ORDER BY duration_seconds DESC)           AS rank_among_trips_from_same_terminal       FROM         tutorial.dc_bikeshare_q1_2012       WHERE         start_time < '2012-01-08') subq  WHERE    subq.rank_among_trips_from_same_terminal <= 5;/* Write a query that shows only the duration of the trip and the percentileinto which that duration falls (across the entire dataset â€” not partitioned by terminal).https://modeanalytics.com/tutorial/reports/68795b2e1763 */SELECT    duration_seconds,    NTILE(100)      OVER        (ORDER BY duration_seconds DESC)      AS durtion_percentile  FROM    tutorial.dc_bikeshare_q1_2012  WHERE    start_time < '2012-01-08';-- LAG & LEADSELECT    start_terminal,    duration_seconds,    LAG(duration_seconds, 1)      OVER        (PARTITION BY start_terminal ORDER BY duration_seconds)      AS lag,    LEAD(duration_seconds, 1)      OVER        (PARTITION BY start_terminal ORDER BY duration_seconds)      AS lead  FROM    tutorial.dc_bikeshare_q1_2012  WHERE    start_time < '2012-01-08'  ORDER BY    start_terminal,    duration_seconds;-- calculate differencesSELECT    *  FROM (    SELECT        start_terminal,        duration_seconds,        duration_seconds -          LAG(duration_seconds, 1)            OVER              (PARTITION BY start_terminal ORDER BY duration_seconds)            AS difference      FROM        tutorial.dc_bikeshare_q1_2012      WHERE        start_time < '2012-01-08'      ORDER BY        start_terminal,        duration_seconds) subq  WHERE    subq.difference IS NOT NULL;-- windowing alias-- (The WINDOW clause, if included, should always come after the WHERE clause.)SELECT    start_terminal,    duration_seconds,    NTILE(4) OVER ntile_window AS quartile,    NTILE(5) OVER ntile_window AS quintile,    NTILE(100) OVER ntile_window AS percentile  FROM    tutorial.dc_bikeshare_q1_2012  WHERE    start_time < '2012-01-08'  WINDOW    ntile_window AS (PARTITION BY start_terminal ORDER BY duration_seconds)  ORDER BY    start_terminal,    duration_seconds;